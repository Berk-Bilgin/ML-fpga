// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_array_ap_fixed_4u_array_ap_fixed_28_16_1_0_0_16u_config15_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_stream_V_data_0_V_dout,
        data_stream_V_data_0_V_empty_n,
        data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout,
        data_stream_V_data_1_V_empty_n,
        data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout,
        data_stream_V_data_2_V_empty_n,
        data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout,
        data_stream_V_data_3_V_empty_n,
        data_stream_V_data_3_V_read,
        res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n,
        res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n,
        res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n,
        res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n,
        res_stream_V_data_3_V_write,
        res_stream_V_data_4_V_din,
        res_stream_V_data_4_V_full_n,
        res_stream_V_data_4_V_write,
        res_stream_V_data_5_V_din,
        res_stream_V_data_5_V_full_n,
        res_stream_V_data_5_V_write,
        res_stream_V_data_6_V_din,
        res_stream_V_data_6_V_full_n,
        res_stream_V_data_6_V_write,
        res_stream_V_data_7_V_din,
        res_stream_V_data_7_V_full_n,
        res_stream_V_data_7_V_write,
        res_stream_V_data_8_V_din,
        res_stream_V_data_8_V_full_n,
        res_stream_V_data_8_V_write,
        res_stream_V_data_9_V_din,
        res_stream_V_data_9_V_full_n,
        res_stream_V_data_9_V_write,
        res_stream_V_data_10_V_din,
        res_stream_V_data_10_V_full_n,
        res_stream_V_data_10_V_write,
        res_stream_V_data_11_V_din,
        res_stream_V_data_11_V_full_n,
        res_stream_V_data_11_V_write,
        res_stream_V_data_12_V_din,
        res_stream_V_data_12_V_full_n,
        res_stream_V_data_12_V_write,
        res_stream_V_data_13_V_din,
        res_stream_V_data_13_V_full_n,
        res_stream_V_data_13_V_write,
        res_stream_V_data_14_V_din,
        res_stream_V_data_14_V_full_n,
        res_stream_V_data_14_V_write,
        res_stream_V_data_15_V_din,
        res_stream_V_data_15_V_full_n,
        res_stream_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_pp0_stage0 = 16'd2;
parameter    ap_ST_fsm_state4 = 16'd4;
parameter    ap_ST_fsm_state5 = 16'd8;
parameter    ap_ST_fsm_state6 = 16'd16;
parameter    ap_ST_fsm_state7 = 16'd32;
parameter    ap_ST_fsm_state8 = 16'd64;
parameter    ap_ST_fsm_state9 = 16'd128;
parameter    ap_ST_fsm_state10 = 16'd256;
parameter    ap_ST_fsm_state11 = 16'd512;
parameter    ap_ST_fsm_state12 = 16'd1024;
parameter    ap_ST_fsm_state13 = 16'd2048;
parameter    ap_ST_fsm_state14 = 16'd4096;
parameter    ap_ST_fsm_state15 = 16'd8192;
parameter    ap_ST_fsm_state16 = 16'd16384;
parameter    ap_ST_fsm_state17 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [27:0] data_stream_V_data_0_V_dout;
input   data_stream_V_data_0_V_empty_n;
output   data_stream_V_data_0_V_read;
input  [27:0] data_stream_V_data_1_V_dout;
input   data_stream_V_data_1_V_empty_n;
output   data_stream_V_data_1_V_read;
input  [27:0] data_stream_V_data_2_V_dout;
input   data_stream_V_data_2_V_empty_n;
output   data_stream_V_data_2_V_read;
input  [27:0] data_stream_V_data_3_V_dout;
input   data_stream_V_data_3_V_empty_n;
output   data_stream_V_data_3_V_read;
output  [27:0] res_stream_V_data_0_V_din;
input   res_stream_V_data_0_V_full_n;
output   res_stream_V_data_0_V_write;
output  [27:0] res_stream_V_data_1_V_din;
input   res_stream_V_data_1_V_full_n;
output   res_stream_V_data_1_V_write;
output  [27:0] res_stream_V_data_2_V_din;
input   res_stream_V_data_2_V_full_n;
output   res_stream_V_data_2_V_write;
output  [27:0] res_stream_V_data_3_V_din;
input   res_stream_V_data_3_V_full_n;
output   res_stream_V_data_3_V_write;
output  [27:0] res_stream_V_data_4_V_din;
input   res_stream_V_data_4_V_full_n;
output   res_stream_V_data_4_V_write;
output  [27:0] res_stream_V_data_5_V_din;
input   res_stream_V_data_5_V_full_n;
output   res_stream_V_data_5_V_write;
output  [27:0] res_stream_V_data_6_V_din;
input   res_stream_V_data_6_V_full_n;
output   res_stream_V_data_6_V_write;
output  [27:0] res_stream_V_data_7_V_din;
input   res_stream_V_data_7_V_full_n;
output   res_stream_V_data_7_V_write;
output  [27:0] res_stream_V_data_8_V_din;
input   res_stream_V_data_8_V_full_n;
output   res_stream_V_data_8_V_write;
output  [27:0] res_stream_V_data_9_V_din;
input   res_stream_V_data_9_V_full_n;
output   res_stream_V_data_9_V_write;
output  [27:0] res_stream_V_data_10_V_din;
input   res_stream_V_data_10_V_full_n;
output   res_stream_V_data_10_V_write;
output  [27:0] res_stream_V_data_11_V_din;
input   res_stream_V_data_11_V_full_n;
output   res_stream_V_data_11_V_write;
output  [27:0] res_stream_V_data_12_V_din;
input   res_stream_V_data_12_V_full_n;
output   res_stream_V_data_12_V_write;
output  [27:0] res_stream_V_data_13_V_din;
input   res_stream_V_data_13_V_full_n;
output   res_stream_V_data_13_V_write;
output  [27:0] res_stream_V_data_14_V_din;
input   res_stream_V_data_14_V_full_n;
output   res_stream_V_data_14_V_write;
output  [27:0] res_stream_V_data_15_V_din;
input   res_stream_V_data_15_V_full_n;
output   res_stream_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_stream_V_data_0_V_read;
reg data_stream_V_data_1_V_read;
reg data_stream_V_data_2_V_read;
reg data_stream_V_data_3_V_read;
reg res_stream_V_data_0_V_write;
reg res_stream_V_data_1_V_write;
reg res_stream_V_data_2_V_write;
reg res_stream_V_data_3_V_write;
reg res_stream_V_data_4_V_write;
reg res_stream_V_data_5_V_write;
reg res_stream_V_data_6_V_write;
reg res_stream_V_data_7_V_write;
reg res_stream_V_data_8_V_write;
reg res_stream_V_data_9_V_write;
reg res_stream_V_data_10_V_write;
reg res_stream_V_data_11_V_write;
reg res_stream_V_data_12_V_write;
reg res_stream_V_data_13_V_write;
reg res_stream_V_data_14_V_write;
reg res_stream_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    data_stream_V_data_1_V_blk_n;
reg    data_stream_V_data_2_V_blk_n;
reg    data_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_0_V_blk_n;
wire    ap_CS_fsm_state17;
reg    res_stream_V_data_1_V_blk_n;
reg    res_stream_V_data_2_V_blk_n;
reg    res_stream_V_data_3_V_blk_n;
reg    res_stream_V_data_4_V_blk_n;
reg    res_stream_V_data_5_V_blk_n;
reg    res_stream_V_data_6_V_blk_n;
reg    res_stream_V_data_7_V_blk_n;
reg    res_stream_V_data_8_V_blk_n;
reg    res_stream_V_data_9_V_blk_n;
reg    res_stream_V_data_10_V_blk_n;
reg    res_stream_V_data_11_V_blk_n;
reg    res_stream_V_data_12_V_blk_n;
reg    res_stream_V_data_13_V_blk_n;
reg    res_stream_V_data_14_V_blk_n;
reg    res_stream_V_data_15_V_blk_n;
reg   [4:0] i_in_0_reg_676;
wire   [0:0] icmp_ln36_fu_755_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op177;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_in_fu_761_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] trunc_ln203_fu_767_p1;
reg   [3:0] trunc_ln203_reg_1820;
wire    ap_CS_fsm_state4;
reg   [27:0] tmp_data_0_V16_reg_2144;
wire    ap_CS_fsm_state16;
reg   [27:0] tmp_data_1_V16_reg_2149;
reg   [27:0] tmp_data_2_V16_reg_2154;
reg   [27:0] tmp_data_3_V16_reg_2159;
reg   [27:0] tmp_data_4_V_reg_2164;
reg   [27:0] tmp_data_5_V_reg_2169;
reg   [27:0] tmp_data_6_V_reg_2174;
reg   [27:0] tmp_data_7_V_reg_2179;
reg   [27:0] tmp_data_8_V_reg_2184;
reg   [27:0] tmp_data_9_V_reg_2189;
reg   [27:0] tmp_data_10_V_reg_2194;
reg   [27:0] tmp_data_11_V_reg_2199;
reg   [27:0] tmp_data_12_V_reg_2204;
reg   [27:0] tmp_data_13_V_reg_2209;
reg   [27:0] tmp_data_14_V_reg_2214;
reg   [27:0] tmp_data_15_V_reg_2219;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_0;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_1;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_2;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_3;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_4;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_5;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_6;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_7;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_8;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_9;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_10;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_11;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_12;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_13;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_14;
wire   [27:0] grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_15;
reg   [27:0] tmp_data_0_V_fu_356;
reg   [27:0] tmp_data_1_V_fu_360;
reg   [27:0] tmp_data_2_V_fu_364;
reg   [27:0] tmp_data_3_V_fu_368;
reg   [27:0] tmp_data_0_V_1_fu_372;
reg   [27:0] tmp_data_1_V_1_fu_376;
reg   [27:0] tmp_data_2_V_1_fu_380;
reg   [27:0] tmp_data_3_V_1_fu_384;
reg   [27:0] tmp_data_0_V_2_fu_388;
reg   [27:0] tmp_data_1_V_2_fu_392;
reg   [27:0] tmp_data_2_V_2_fu_396;
reg   [27:0] tmp_data_3_V_2_fu_400;
reg   [27:0] tmp_data_0_V_3_fu_404;
reg   [27:0] tmp_data_1_V_3_fu_408;
reg   [27:0] tmp_data_2_V_3_fu_412;
reg   [27:0] tmp_data_3_V_3_fu_416;
reg   [27:0] tmp_data_0_V_4_fu_420;
reg   [27:0] tmp_data_1_V_4_fu_424;
reg   [27:0] tmp_data_2_V_4_fu_428;
reg   [27:0] tmp_data_3_V_4_fu_432;
reg   [27:0] tmp_data_0_V_5_fu_436;
reg   [27:0] tmp_data_1_V_5_fu_440;
reg   [27:0] tmp_data_2_V_5_fu_444;
reg   [27:0] tmp_data_3_V_5_fu_448;
reg   [27:0] tmp_data_0_V_6_fu_452;
reg   [27:0] tmp_data_1_V_6_fu_456;
reg   [27:0] tmp_data_2_V_6_fu_460;
reg   [27:0] tmp_data_3_V_6_fu_464;
reg   [27:0] tmp_data_0_V_7_fu_468;
reg   [27:0] tmp_data_1_V_7_fu_472;
reg   [27:0] tmp_data_2_V_7_fu_476;
reg   [27:0] tmp_data_3_V_7_fu_480;
reg   [27:0] tmp_data_0_V_8_fu_484;
reg   [27:0] tmp_data_1_V_8_fu_488;
reg   [27:0] tmp_data_2_V_8_fu_492;
reg   [27:0] tmp_data_3_V_8_fu_496;
reg   [27:0] tmp_data_0_V_9_fu_500;
reg   [27:0] tmp_data_1_V_9_fu_504;
reg   [27:0] tmp_data_2_V_9_fu_508;
reg   [27:0] tmp_data_3_V_9_fu_512;
reg   [27:0] tmp_data_0_V_10_fu_516;
reg   [27:0] tmp_data_1_V_10_fu_520;
reg   [27:0] tmp_data_2_V_10_fu_524;
reg   [27:0] tmp_data_3_V_10_fu_528;
reg   [27:0] tmp_data_0_V_11_fu_532;
reg   [27:0] tmp_data_1_V_11_fu_536;
reg   [27:0] tmp_data_2_V_11_fu_540;
reg   [27:0] tmp_data_3_V_11_fu_544;
reg   [27:0] tmp_data_0_V_12_fu_548;
reg   [27:0] tmp_data_1_V_12_fu_552;
reg   [27:0] tmp_data_2_V_12_fu_556;
reg   [27:0] tmp_data_3_V_12_fu_560;
reg   [27:0] tmp_data_0_V_13_fu_564;
reg   [27:0] tmp_data_1_V_13_fu_568;
reg   [27:0] tmp_data_2_V_13_fu_572;
reg   [27:0] tmp_data_3_V_13_fu_576;
reg   [27:0] tmp_data_0_V_14_fu_580;
reg   [27:0] tmp_data_1_V_14_fu_584;
reg   [27:0] tmp_data_2_V_14_fu_588;
reg   [27:0] tmp_data_3_V_14_fu_592;
reg   [27:0] tmp_data_0_V_15_fu_596;
reg   [27:0] tmp_data_1_V_15_fu_600;
reg   [27:0] tmp_data_2_V_15_fu_604;
reg   [27:0] tmp_data_3_V_15_fu_608;
wire    io_acc_block_signal_op345;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_0_V_read(tmp_data_0_V_fu_356),
    .data_1_V_read(tmp_data_1_V_fu_360),
    .data_2_V_read(tmp_data_2_V_fu_364),
    .data_3_V_read(tmp_data_3_V_fu_368),
    .data_4_V_read(tmp_data_0_V_1_fu_372),
    .data_5_V_read(tmp_data_1_V_1_fu_376),
    .data_6_V_read(tmp_data_2_V_1_fu_380),
    .data_7_V_read(tmp_data_3_V_1_fu_384),
    .data_8_V_read(tmp_data_0_V_2_fu_388),
    .data_9_V_read(tmp_data_1_V_2_fu_392),
    .data_10_V_read(tmp_data_2_V_2_fu_396),
    .data_11_V_read(tmp_data_3_V_2_fu_400),
    .data_12_V_read(tmp_data_0_V_3_fu_404),
    .data_13_V_read(tmp_data_1_V_3_fu_408),
    .data_14_V_read(tmp_data_2_V_3_fu_412),
    .data_15_V_read(tmp_data_3_V_3_fu_416),
    .data_16_V_read(tmp_data_0_V_4_fu_420),
    .data_17_V_read(tmp_data_1_V_4_fu_424),
    .data_18_V_read(tmp_data_2_V_4_fu_428),
    .data_19_V_read(tmp_data_3_V_4_fu_432),
    .data_20_V_read(tmp_data_0_V_5_fu_436),
    .data_21_V_read(tmp_data_1_V_5_fu_440),
    .data_22_V_read(tmp_data_2_V_5_fu_444),
    .data_23_V_read(tmp_data_3_V_5_fu_448),
    .data_24_V_read(tmp_data_0_V_6_fu_452),
    .data_25_V_read(tmp_data_1_V_6_fu_456),
    .data_26_V_read(tmp_data_2_V_6_fu_460),
    .data_27_V_read(tmp_data_3_V_6_fu_464),
    .data_28_V_read(tmp_data_0_V_7_fu_468),
    .data_29_V_read(tmp_data_1_V_7_fu_472),
    .data_30_V_read(tmp_data_2_V_7_fu_476),
    .data_31_V_read(tmp_data_3_V_7_fu_480),
    .data_32_V_read(tmp_data_0_V_8_fu_484),
    .data_33_V_read(tmp_data_1_V_8_fu_488),
    .data_34_V_read(tmp_data_2_V_8_fu_492),
    .data_35_V_read(tmp_data_3_V_8_fu_496),
    .data_36_V_read(tmp_data_0_V_9_fu_500),
    .data_37_V_read(tmp_data_1_V_9_fu_504),
    .data_38_V_read(tmp_data_2_V_9_fu_508),
    .data_39_V_read(tmp_data_3_V_9_fu_512),
    .data_40_V_read(tmp_data_0_V_10_fu_516),
    .data_41_V_read(tmp_data_1_V_10_fu_520),
    .data_42_V_read(tmp_data_2_V_10_fu_524),
    .data_43_V_read(tmp_data_3_V_10_fu_528),
    .data_44_V_read(tmp_data_0_V_11_fu_532),
    .data_45_V_read(tmp_data_1_V_11_fu_536),
    .data_46_V_read(tmp_data_2_V_11_fu_540),
    .data_47_V_read(tmp_data_3_V_11_fu_544),
    .data_48_V_read(tmp_data_0_V_12_fu_548),
    .data_49_V_read(tmp_data_1_V_12_fu_552),
    .data_50_V_read(tmp_data_2_V_12_fu_556),
    .data_51_V_read(tmp_data_3_V_12_fu_560),
    .data_52_V_read(tmp_data_0_V_13_fu_564),
    .data_53_V_read(tmp_data_1_V_13_fu_568),
    .data_54_V_read(tmp_data_2_V_13_fu_572),
    .data_55_V_read(tmp_data_3_V_13_fu_576),
    .data_56_V_read(tmp_data_0_V_14_fu_580),
    .data_57_V_read(tmp_data_1_V_14_fu_584),
    .data_58_V_read(tmp_data_2_V_14_fu_588),
    .data_59_V_read(tmp_data_3_V_14_fu_592),
    .data_60_V_read(tmp_data_0_V_15_fu_596),
    .data_61_V_read(tmp_data_1_V_15_fu_600),
    .data_62_V_read(tmp_data_2_V_15_fu_604),
    .data_63_V_read(tmp_data_3_V_15_fu_608),
    .ap_return_0(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_9),
    .ap_return_10(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_10),
    .ap_return_11(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_11),
    .ap_return_12(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_12),
    .ap_return_13(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_13),
    .ap_return_14(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_14),
    .ap_return_15(grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_755_p2 == 1'd0))) begin
        i_in_0_reg_676 <= i_in_fu_761_p2;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_in_0_reg_676 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_data_0_V16_reg_2144 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_0;
        tmp_data_10_V_reg_2194 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_10;
        tmp_data_11_V_reg_2199 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_11;
        tmp_data_12_V_reg_2204 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_12;
        tmp_data_13_V_reg_2209 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_13;
        tmp_data_14_V_reg_2214 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_14;
        tmp_data_15_V_reg_2219 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_15;
        tmp_data_1_V16_reg_2149 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_1;
        tmp_data_2_V16_reg_2154 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_2;
        tmp_data_3_V16_reg_2159 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_3;
        tmp_data_4_V_reg_2164 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_4;
        tmp_data_5_V_reg_2169 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_5;
        tmp_data_6_V_reg_2174 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_6;
        tmp_data_7_V_reg_2179 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_7;
        tmp_data_8_V_reg_2184 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_8;
        tmp_data_9_V_reg_2189 <= grp_dense_wrapper_ap_fixed_28_16_1_0_0_ap_fixed_28_16_1_0_0_config15_s_fu_687_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_10_fu_516 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_10_fu_520 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_10_fu_524 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_10_fu_528 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_11_fu_532 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_11_fu_536 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_11_fu_540 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_11_fu_544 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_12_fu_548 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_12_fu_552 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_12_fu_556 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_12_fu_560 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_13_fu_564 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_13_fu_568 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_13_fu_572 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_13_fu_576 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_14_fu_580 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_14_fu_584 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_14_fu_588 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_14_fu_592 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_15_fu_596 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_15_fu_600 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_15_fu_604 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_15_fu_608 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_1_fu_372 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_1_fu_376 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_1_fu_380 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_1_fu_384 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_2_fu_388 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_2_fu_392 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_2_fu_396 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_2_fu_400 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_3_fu_404 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_3_fu_408 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_3_fu_412 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_3_fu_416 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_4_fu_420 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_4_fu_424 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_4_fu_428 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_4_fu_432 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_5_fu_436 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_5_fu_440 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_5_fu_444 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_5_fu_448 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_6_fu_452 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_6_fu_456 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_6_fu_460 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_6_fu_464 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_7_fu_468 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_7_fu_472 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_7_fu_476 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_7_fu_480 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_8_fu_484 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_8_fu_488 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_8_fu_492 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_8_fu_496 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_9_fu_500 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_9_fu_504 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_9_fu_508 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_9_fu_512 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln203_reg_1820 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_fu_356 <= data_stream_V_data_0_V_dout;
        tmp_data_1_V_fu_360 <= data_stream_V_data_1_V_dout;
        tmp_data_2_V_fu_364 <= data_stream_V_data_2_V_dout;
        tmp_data_3_V_fu_368 <= data_stream_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_fu_755_p2 == 1'd0))) begin
        trunc_ln203_reg_1820 <= trunc_ln203_fu_767_p1;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_755_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_0_V_blk_n = data_stream_V_data_0_V_empty_n;
    end else begin
        data_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_0_V_read = 1'b1;
    end else begin
        data_stream_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_1_V_blk_n = data_stream_V_data_1_V_empty_n;
    end else begin
        data_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_1_V_read = 1'b1;
    end else begin
        data_stream_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_2_V_blk_n = data_stream_V_data_2_V_empty_n;
    end else begin
        data_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_2_V_read = 1'b1;
    end else begin
        data_stream_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_stream_V_data_3_V_blk_n = data_stream_V_data_3_V_empty_n;
    end else begin
        data_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_stream_V_data_3_V_read = 1'b1;
    end else begin
        data_stream_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_0_V_blk_n = res_stream_V_data_0_V_full_n;
    end else begin
        res_stream_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_0_V_write = 1'b1;
    end else begin
        res_stream_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_10_V_blk_n = res_stream_V_data_10_V_full_n;
    end else begin
        res_stream_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_10_V_write = 1'b1;
    end else begin
        res_stream_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_11_V_blk_n = res_stream_V_data_11_V_full_n;
    end else begin
        res_stream_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_11_V_write = 1'b1;
    end else begin
        res_stream_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_12_V_blk_n = res_stream_V_data_12_V_full_n;
    end else begin
        res_stream_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_12_V_write = 1'b1;
    end else begin
        res_stream_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_13_V_blk_n = res_stream_V_data_13_V_full_n;
    end else begin
        res_stream_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_13_V_write = 1'b1;
    end else begin
        res_stream_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_14_V_blk_n = res_stream_V_data_14_V_full_n;
    end else begin
        res_stream_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_14_V_write = 1'b1;
    end else begin
        res_stream_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_15_V_blk_n = res_stream_V_data_15_V_full_n;
    end else begin
        res_stream_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_15_V_write = 1'b1;
    end else begin
        res_stream_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_1_V_blk_n = res_stream_V_data_1_V_full_n;
    end else begin
        res_stream_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_1_V_write = 1'b1;
    end else begin
        res_stream_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_2_V_blk_n = res_stream_V_data_2_V_full_n;
    end else begin
        res_stream_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_2_V_write = 1'b1;
    end else begin
        res_stream_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_3_V_blk_n = res_stream_V_data_3_V_full_n;
    end else begin
        res_stream_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_3_V_write = 1'b1;
    end else begin
        res_stream_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_4_V_blk_n = res_stream_V_data_4_V_full_n;
    end else begin
        res_stream_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_4_V_write = 1'b1;
    end else begin
        res_stream_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_5_V_blk_n = res_stream_V_data_5_V_full_n;
    end else begin
        res_stream_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_5_V_write = 1'b1;
    end else begin
        res_stream_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_6_V_blk_n = res_stream_V_data_6_V_full_n;
    end else begin
        res_stream_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_6_V_write = 1'b1;
    end else begin
        res_stream_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_7_V_blk_n = res_stream_V_data_7_V_full_n;
    end else begin
        res_stream_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_7_V_write = 1'b1;
    end else begin
        res_stream_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_8_V_blk_n = res_stream_V_data_8_V_full_n;
    end else begin
        res_stream_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_8_V_write = 1'b1;
    end else begin
        res_stream_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        res_stream_V_data_9_V_blk_n = res_stream_V_data_9_V_full_n;
    end else begin
        res_stream_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        res_stream_V_data_9_V_write = 1'b1;
    end else begin
        res_stream_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_755_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_755_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((io_acc_block_signal_op345 == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((io_acc_block_signal_op177 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((io_acc_block_signal_op177 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (io_acc_block_signal_op177 == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_in_fu_761_p2 = (i_in_0_reg_676 + 5'd1);

assign icmp_ln36_fu_755_p2 = ((i_in_0_reg_676 == 5'd16) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op177 = (data_stream_V_data_3_V_empty_n & data_stream_V_data_2_V_empty_n & data_stream_V_data_1_V_empty_n & data_stream_V_data_0_V_empty_n);

assign io_acc_block_signal_op345 = (res_stream_V_data_9_V_full_n & res_stream_V_data_8_V_full_n & res_stream_V_data_7_V_full_n & res_stream_V_data_6_V_full_n & res_stream_V_data_5_V_full_n & res_stream_V_data_4_V_full_n & res_stream_V_data_3_V_full_n & res_stream_V_data_2_V_full_n & res_stream_V_data_1_V_full_n & res_stream_V_data_15_V_full_n & res_stream_V_data_14_V_full_n & res_stream_V_data_13_V_full_n & res_stream_V_data_12_V_full_n & res_stream_V_data_11_V_full_n & res_stream_V_data_10_V_full_n & res_stream_V_data_0_V_full_n);

assign res_stream_V_data_0_V_din = tmp_data_0_V16_reg_2144;

assign res_stream_V_data_10_V_din = tmp_data_10_V_reg_2194;

assign res_stream_V_data_11_V_din = tmp_data_11_V_reg_2199;

assign res_stream_V_data_12_V_din = tmp_data_12_V_reg_2204;

assign res_stream_V_data_13_V_din = tmp_data_13_V_reg_2209;

assign res_stream_V_data_14_V_din = tmp_data_14_V_reg_2214;

assign res_stream_V_data_15_V_din = tmp_data_15_V_reg_2219;

assign res_stream_V_data_1_V_din = tmp_data_1_V16_reg_2149;

assign res_stream_V_data_2_V_din = tmp_data_2_V16_reg_2154;

assign res_stream_V_data_3_V_din = tmp_data_3_V16_reg_2159;

assign res_stream_V_data_4_V_din = tmp_data_4_V_reg_2164;

assign res_stream_V_data_5_V_din = tmp_data_5_V_reg_2169;

assign res_stream_V_data_6_V_din = tmp_data_6_V_reg_2174;

assign res_stream_V_data_7_V_din = tmp_data_7_V_reg_2179;

assign res_stream_V_data_8_V_din = tmp_data_8_V_reg_2184;

assign res_stream_V_data_9_V_din = tmp_data_9_V_reg_2189;

assign start_out = real_start;

assign trunc_ln203_fu_767_p1 = i_in_0_reg_676[3:0];

endmodule //dense_array_ap_fixed_4u_array_ap_fixed_28_16_1_0_0_16u_config15_s
