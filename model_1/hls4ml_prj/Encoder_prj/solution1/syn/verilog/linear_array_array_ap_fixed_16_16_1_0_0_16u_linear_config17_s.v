// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_array_array_ap_fixed_16_16_1_0_0_16u_linear_config17_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_TREADY,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        res_V_data_10_V_TDATA,
        res_V_data_10_V_TVALID,
        res_V_data_10_V_TREADY,
        res_V_data_11_V_TDATA,
        res_V_data_11_V_TVALID,
        res_V_data_11_V_TREADY,
        res_V_data_12_V_TDATA,
        res_V_data_12_V_TVALID,
        res_V_data_12_V_TREADY,
        res_V_data_13_V_TDATA,
        res_V_data_13_V_TVALID,
        res_V_data_13_V_TREADY,
        res_V_data_14_V_TDATA,
        res_V_data_14_V_TVALID,
        res_V_data_14_V_TREADY,
        res_V_data_15_V_TDATA,
        res_V_data_15_V_TVALID,
        res_V_data_15_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [27:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [27:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [27:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [27:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [27:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [27:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [27:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [27:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [27:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [27:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [27:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [27:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [27:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [27:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [27:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [27:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output  [15:0] res_V_data_10_V_TDATA;
output   res_V_data_10_V_TVALID;
input   res_V_data_10_V_TREADY;
output  [15:0] res_V_data_11_V_TDATA;
output   res_V_data_11_V_TVALID;
input   res_V_data_11_V_TREADY;
output  [15:0] res_V_data_12_V_TDATA;
output   res_V_data_12_V_TVALID;
input   res_V_data_12_V_TREADY;
output  [15:0] res_V_data_13_V_TDATA;
output   res_V_data_13_V_TVALID;
input   res_V_data_13_V_TREADY;
output  [15:0] res_V_data_14_V_TDATA;
output   res_V_data_14_V_TVALID;
input   res_V_data_14_V_TREADY;
output  [15:0] res_V_data_15_V_TDATA;
output   res_V_data_15_V_TVALID;
input   res_V_data_15_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_res_V_data_0_V_U_apdone_blk;
wire    regslice_both_res_V_data_1_V_U_apdone_blk;
wire    regslice_both_res_V_data_2_V_U_apdone_blk;
wire    regslice_both_res_V_data_3_V_U_apdone_blk;
wire    regslice_both_res_V_data_4_V_U_apdone_blk;
wire    regslice_both_res_V_data_5_V_U_apdone_blk;
wire    regslice_both_res_V_data_6_V_U_apdone_blk;
wire    regslice_both_res_V_data_7_V_U_apdone_blk;
wire    regslice_both_res_V_data_8_V_U_apdone_blk;
wire    regslice_both_res_V_data_9_V_U_apdone_blk;
wire    regslice_both_res_V_data_10_V_U_apdone_blk;
wire    regslice_both_res_V_data_11_V_U_apdone_blk;
wire    regslice_both_res_V_data_12_V_U_apdone_blk;
wire    regslice_both_res_V_data_13_V_U_apdone_blk;
wire    regslice_both_res_V_data_14_V_U_apdone_blk;
wire    regslice_both_res_V_data_15_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    data_V_data_0_V_blk_n;
wire    ap_block_pp0_stage0;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_TDATA_blk_n;
reg    res_V_data_1_V_TDATA_blk_n;
reg    res_V_data_2_V_TDATA_blk_n;
reg    res_V_data_3_V_TDATA_blk_n;
reg    res_V_data_4_V_TDATA_blk_n;
reg    res_V_data_5_V_TDATA_blk_n;
reg    res_V_data_6_V_TDATA_blk_n;
reg    res_V_data_7_V_TDATA_blk_n;
reg    res_V_data_8_V_TDATA_blk_n;
reg    res_V_data_9_V_TDATA_blk_n;
reg    res_V_data_10_V_TDATA_blk_n;
reg    res_V_data_11_V_TDATA_blk_n;
reg    res_V_data_12_V_TDATA_blk_n;
reg    res_V_data_13_V_TDATA_blk_n;
reg    res_V_data_14_V_TDATA_blk_n;
reg    res_V_data_15_V_TDATA_blk_n;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] trunc_ln718_fu_478_p1;
wire   [0:0] tmp_1_fu_460_p3;
wire   [0:0] icmp_ln718_fu_482_p2;
wire   [0:0] or_ln406_fu_488_p2;
wire   [0:0] tmp_2_fu_494_p3;
wire   [0:0] and_ln415_fu_502_p2;
wire   [15:0] trunc_ln_fu_468_p4;
wire   [15:0] zext_ln415_fu_508_p1;
wire   [15:0] add_ln415_fu_512_p2;
wire   [10:0] trunc_ln718_1_fu_544_p1;
wire   [0:0] tmp_4_fu_526_p3;
wire   [0:0] icmp_ln718_1_fu_548_p2;
wire   [0:0] or_ln406_1_fu_554_p2;
wire   [0:0] tmp_5_fu_560_p3;
wire   [0:0] and_ln415_1_fu_568_p2;
wire   [15:0] trunc_ln708_1_fu_534_p4;
wire   [15:0] zext_ln415_1_fu_574_p1;
wire   [15:0] add_ln415_1_fu_578_p2;
wire   [10:0] trunc_ln718_2_fu_610_p1;
wire   [0:0] tmp_7_fu_592_p3;
wire   [0:0] icmp_ln718_2_fu_614_p2;
wire   [0:0] or_ln406_2_fu_620_p2;
wire   [0:0] tmp_8_fu_626_p3;
wire   [0:0] and_ln415_2_fu_634_p2;
wire   [15:0] trunc_ln708_2_fu_600_p4;
wire   [15:0] zext_ln415_2_fu_640_p1;
wire   [15:0] add_ln415_2_fu_644_p2;
wire   [10:0] trunc_ln718_3_fu_676_p1;
wire   [0:0] tmp_10_fu_658_p3;
wire   [0:0] icmp_ln718_3_fu_680_p2;
wire   [0:0] or_ln406_3_fu_686_p2;
wire   [0:0] tmp_11_fu_692_p3;
wire   [0:0] and_ln415_3_fu_700_p2;
wire   [15:0] trunc_ln708_3_fu_666_p4;
wire   [15:0] zext_ln415_3_fu_706_p1;
wire   [15:0] add_ln415_3_fu_710_p2;
wire   [10:0] trunc_ln718_4_fu_742_p1;
wire   [0:0] tmp_13_fu_724_p3;
wire   [0:0] icmp_ln718_4_fu_746_p2;
wire   [0:0] or_ln406_4_fu_752_p2;
wire   [0:0] tmp_14_fu_758_p3;
wire   [0:0] and_ln415_4_fu_766_p2;
wire   [15:0] trunc_ln708_4_fu_732_p4;
wire   [15:0] zext_ln415_4_fu_772_p1;
wire   [15:0] add_ln415_4_fu_776_p2;
wire   [10:0] trunc_ln718_5_fu_808_p1;
wire   [0:0] tmp_16_fu_790_p3;
wire   [0:0] icmp_ln718_5_fu_812_p2;
wire   [0:0] or_ln406_5_fu_818_p2;
wire   [0:0] tmp_17_fu_824_p3;
wire   [0:0] and_ln415_5_fu_832_p2;
wire   [15:0] trunc_ln708_5_fu_798_p4;
wire   [15:0] zext_ln415_5_fu_838_p1;
wire   [15:0] add_ln415_5_fu_842_p2;
wire   [10:0] trunc_ln718_6_fu_874_p1;
wire   [0:0] tmp_19_fu_856_p3;
wire   [0:0] icmp_ln718_6_fu_878_p2;
wire   [0:0] or_ln406_6_fu_884_p2;
wire   [0:0] tmp_20_fu_890_p3;
wire   [0:0] and_ln415_6_fu_898_p2;
wire   [15:0] trunc_ln708_6_fu_864_p4;
wire   [15:0] zext_ln415_6_fu_904_p1;
wire   [15:0] add_ln415_6_fu_908_p2;
wire   [10:0] trunc_ln718_7_fu_940_p1;
wire   [0:0] tmp_22_fu_922_p3;
wire   [0:0] icmp_ln718_7_fu_944_p2;
wire   [0:0] or_ln406_7_fu_950_p2;
wire   [0:0] tmp_23_fu_956_p3;
wire   [0:0] and_ln415_7_fu_964_p2;
wire   [15:0] trunc_ln708_7_fu_930_p4;
wire   [15:0] zext_ln415_7_fu_970_p1;
wire   [15:0] add_ln415_7_fu_974_p2;
wire   [10:0] trunc_ln718_8_fu_1006_p1;
wire   [0:0] tmp_25_fu_988_p3;
wire   [0:0] icmp_ln718_8_fu_1010_p2;
wire   [0:0] or_ln406_8_fu_1016_p2;
wire   [0:0] tmp_26_fu_1022_p3;
wire   [0:0] and_ln415_8_fu_1030_p2;
wire   [15:0] trunc_ln708_8_fu_996_p4;
wire   [15:0] zext_ln415_8_fu_1036_p1;
wire   [15:0] add_ln415_8_fu_1040_p2;
wire   [10:0] trunc_ln718_9_fu_1072_p1;
wire   [0:0] tmp_28_fu_1054_p3;
wire   [0:0] icmp_ln718_9_fu_1076_p2;
wire   [0:0] or_ln406_9_fu_1082_p2;
wire   [0:0] tmp_29_fu_1088_p3;
wire   [0:0] and_ln415_9_fu_1096_p2;
wire   [15:0] trunc_ln708_9_fu_1062_p4;
wire   [15:0] zext_ln415_9_fu_1102_p1;
wire   [15:0] add_ln415_9_fu_1106_p2;
wire   [10:0] trunc_ln718_10_fu_1138_p1;
wire   [0:0] tmp_31_fu_1120_p3;
wire   [0:0] icmp_ln718_10_fu_1142_p2;
wire   [0:0] or_ln406_10_fu_1148_p2;
wire   [0:0] tmp_32_fu_1154_p3;
wire   [0:0] and_ln415_10_fu_1162_p2;
wire   [15:0] trunc_ln708_s_fu_1128_p4;
wire   [15:0] zext_ln415_10_fu_1168_p1;
wire   [15:0] add_ln415_10_fu_1172_p2;
wire   [10:0] trunc_ln718_11_fu_1204_p1;
wire   [0:0] tmp_34_fu_1186_p3;
wire   [0:0] icmp_ln718_11_fu_1208_p2;
wire   [0:0] or_ln406_11_fu_1214_p2;
wire   [0:0] tmp_35_fu_1220_p3;
wire   [0:0] and_ln415_11_fu_1228_p2;
wire   [15:0] trunc_ln708_10_fu_1194_p4;
wire   [15:0] zext_ln415_11_fu_1234_p1;
wire   [15:0] add_ln415_11_fu_1238_p2;
wire   [10:0] trunc_ln718_12_fu_1270_p1;
wire   [0:0] tmp_37_fu_1252_p3;
wire   [0:0] icmp_ln718_12_fu_1274_p2;
wire   [0:0] or_ln406_12_fu_1280_p2;
wire   [0:0] tmp_38_fu_1286_p3;
wire   [0:0] and_ln415_12_fu_1294_p2;
wire   [15:0] trunc_ln708_11_fu_1260_p4;
wire   [15:0] zext_ln415_12_fu_1300_p1;
wire   [15:0] add_ln415_12_fu_1304_p2;
wire   [0:0] tmp_39_fu_1310_p3;
wire   [15:0] phitmp_12_fu_1318_p3;
wire   [10:0] trunc_ln718_13_fu_1353_p1;
wire   [0:0] tmp_40_fu_1335_p3;
wire   [0:0] icmp_ln718_13_fu_1357_p2;
wire   [0:0] or_ln406_13_fu_1363_p2;
wire   [0:0] tmp_41_fu_1369_p3;
wire   [0:0] and_ln415_13_fu_1377_p2;
wire   [15:0] trunc_ln708_12_fu_1343_p4;
wire   [15:0] zext_ln415_13_fu_1383_p1;
wire   [15:0] add_ln415_13_fu_1387_p2;
wire   [0:0] tmp_42_fu_1393_p3;
wire   [15:0] phitmp_13_fu_1401_p3;
wire   [10:0] trunc_ln718_14_fu_1436_p1;
wire   [0:0] tmp_43_fu_1418_p3;
wire   [0:0] icmp_ln718_14_fu_1440_p2;
wire   [0:0] or_ln406_14_fu_1446_p2;
wire   [0:0] tmp_44_fu_1452_p3;
wire   [0:0] and_ln415_14_fu_1460_p2;
wire   [15:0] trunc_ln708_13_fu_1426_p4;
wire   [15:0] zext_ln415_14_fu_1466_p1;
wire   [15:0] add_ln415_14_fu_1470_p2;
wire   [0:0] tmp_45_fu_1476_p3;
wire   [15:0] phitmp_14_fu_1484_p3;
wire   [10:0] trunc_ln718_15_fu_1519_p1;
wire   [0:0] tmp_46_fu_1501_p3;
wire   [0:0] icmp_ln718_15_fu_1523_p2;
wire   [0:0] or_ln406_15_fu_1529_p2;
wire   [0:0] tmp_47_fu_1535_p3;
wire   [0:0] and_ln415_15_fu_1543_p2;
wire   [15:0] trunc_ln708_14_fu_1509_p4;
wire   [15:0] zext_ln415_15_fu_1549_p1;
wire   [15:0] add_ln415_15_fu_1553_p2;
wire   [0:0] tmp_48_fu_1559_p3;
wire   [15:0] phitmp_15_fu_1567_p3;
wire   [0:0] tmp_3_fu_518_p3;
wire   [15:0] empty_38_fu_1584_p3;
wire   [0:0] tmp_6_fu_584_p3;
wire   [15:0] empty_39_fu_1601_p3;
wire   [0:0] tmp_9_fu_650_p3;
wire   [15:0] empty_40_fu_1618_p3;
wire   [0:0] tmp_12_fu_716_p3;
wire   [15:0] empty_41_fu_1635_p3;
wire   [0:0] tmp_15_fu_782_p3;
wire   [15:0] empty_42_fu_1652_p3;
wire   [0:0] tmp_18_fu_848_p3;
wire   [15:0] empty_43_fu_1669_p3;
wire   [0:0] tmp_21_fu_914_p3;
wire   [15:0] empty_44_fu_1686_p3;
wire   [0:0] tmp_24_fu_980_p3;
wire   [15:0] empty_45_fu_1703_p3;
wire   [0:0] tmp_27_fu_1046_p3;
wire   [15:0] empty_46_fu_1720_p3;
wire   [0:0] tmp_30_fu_1112_p3;
wire   [15:0] empty_47_fu_1737_p3;
wire   [0:0] tmp_33_fu_1178_p3;
wire   [15:0] empty_48_fu_1754_p3;
wire   [0:0] tmp_36_fu_1244_p3;
wire   [15:0] empty_49_fu_1771_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] res_V_data_0_V_TDATA_int;
reg    res_V_data_0_V_TVALID_int;
wire    res_V_data_0_V_TREADY_int;
wire    regslice_both_res_V_data_0_V_U_vld_out;
wire   [15:0] res_V_data_1_V_TDATA_int;
reg    res_V_data_1_V_TVALID_int;
wire    res_V_data_1_V_TREADY_int;
wire    regslice_both_res_V_data_1_V_U_vld_out;
wire   [15:0] res_V_data_2_V_TDATA_int;
reg    res_V_data_2_V_TVALID_int;
wire    res_V_data_2_V_TREADY_int;
wire    regslice_both_res_V_data_2_V_U_vld_out;
wire   [15:0] res_V_data_3_V_TDATA_int;
reg    res_V_data_3_V_TVALID_int;
wire    res_V_data_3_V_TREADY_int;
wire    regslice_both_res_V_data_3_V_U_vld_out;
wire   [15:0] res_V_data_4_V_TDATA_int;
reg    res_V_data_4_V_TVALID_int;
wire    res_V_data_4_V_TREADY_int;
wire    regslice_both_res_V_data_4_V_U_vld_out;
wire   [15:0] res_V_data_5_V_TDATA_int;
reg    res_V_data_5_V_TVALID_int;
wire    res_V_data_5_V_TREADY_int;
wire    regslice_both_res_V_data_5_V_U_vld_out;
wire   [15:0] res_V_data_6_V_TDATA_int;
reg    res_V_data_6_V_TVALID_int;
wire    res_V_data_6_V_TREADY_int;
wire    regslice_both_res_V_data_6_V_U_vld_out;
wire   [15:0] res_V_data_7_V_TDATA_int;
reg    res_V_data_7_V_TVALID_int;
wire    res_V_data_7_V_TREADY_int;
wire    regslice_both_res_V_data_7_V_U_vld_out;
wire   [15:0] res_V_data_8_V_TDATA_int;
reg    res_V_data_8_V_TVALID_int;
wire    res_V_data_8_V_TREADY_int;
wire    regslice_both_res_V_data_8_V_U_vld_out;
wire   [15:0] res_V_data_9_V_TDATA_int;
reg    res_V_data_9_V_TVALID_int;
wire    res_V_data_9_V_TREADY_int;
wire    regslice_both_res_V_data_9_V_U_vld_out;
wire   [15:0] res_V_data_10_V_TDATA_int;
reg    res_V_data_10_V_TVALID_int;
wire    res_V_data_10_V_TREADY_int;
wire    regslice_both_res_V_data_10_V_U_vld_out;
wire   [15:0] res_V_data_11_V_TDATA_int;
reg    res_V_data_11_V_TVALID_int;
wire    res_V_data_11_V_TREADY_int;
wire    regslice_both_res_V_data_11_V_U_vld_out;
wire   [15:0] res_V_data_12_V_TDATA_int;
reg    res_V_data_12_V_TVALID_int;
wire    res_V_data_12_V_TREADY_int;
wire    regslice_both_res_V_data_12_V_U_vld_out;
wire   [15:0] res_V_data_13_V_TDATA_int;
reg    res_V_data_13_V_TVALID_int;
wire    res_V_data_13_V_TREADY_int;
wire    regslice_both_res_V_data_13_V_U_vld_out;
wire   [15:0] res_V_data_14_V_TDATA_int;
reg    res_V_data_14_V_TVALID_int;
wire    res_V_data_14_V_TREADY_int;
wire    regslice_both_res_V_data_14_V_U_vld_out;
wire   [15:0] res_V_data_15_V_TDATA_int;
reg    res_V_data_15_V_TVALID_int;
wire    res_V_data_15_V_TREADY_int;
wire    regslice_both_res_V_data_15_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_0_V_TDATA_int),
    .vld_in(res_V_data_0_V_TVALID_int),
    .ack_in(res_V_data_0_V_TREADY_int),
    .data_out(res_V_data_0_V_TDATA),
    .vld_out(regslice_both_res_V_data_0_V_U_vld_out),
    .ack_out(res_V_data_0_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_0_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_1_V_TDATA_int),
    .vld_in(res_V_data_1_V_TVALID_int),
    .ack_in(res_V_data_1_V_TREADY_int),
    .data_out(res_V_data_1_V_TDATA),
    .vld_out(regslice_both_res_V_data_1_V_U_vld_out),
    .ack_out(res_V_data_1_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_1_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_2_V_TDATA_int),
    .vld_in(res_V_data_2_V_TVALID_int),
    .ack_in(res_V_data_2_V_TREADY_int),
    .data_out(res_V_data_2_V_TDATA),
    .vld_out(regslice_both_res_V_data_2_V_U_vld_out),
    .ack_out(res_V_data_2_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_2_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_3_V_TDATA_int),
    .vld_in(res_V_data_3_V_TVALID_int),
    .ack_in(res_V_data_3_V_TREADY_int),
    .data_out(res_V_data_3_V_TDATA),
    .vld_out(regslice_both_res_V_data_3_V_U_vld_out),
    .ack_out(res_V_data_3_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_3_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_4_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_4_V_TDATA_int),
    .vld_in(res_V_data_4_V_TVALID_int),
    .ack_in(res_V_data_4_V_TREADY_int),
    .data_out(res_V_data_4_V_TDATA),
    .vld_out(regslice_both_res_V_data_4_V_U_vld_out),
    .ack_out(res_V_data_4_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_4_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_5_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_5_V_TDATA_int),
    .vld_in(res_V_data_5_V_TVALID_int),
    .ack_in(res_V_data_5_V_TREADY_int),
    .data_out(res_V_data_5_V_TDATA),
    .vld_out(regslice_both_res_V_data_5_V_U_vld_out),
    .ack_out(res_V_data_5_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_5_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_6_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_6_V_TDATA_int),
    .vld_in(res_V_data_6_V_TVALID_int),
    .ack_in(res_V_data_6_V_TREADY_int),
    .data_out(res_V_data_6_V_TDATA),
    .vld_out(regslice_both_res_V_data_6_V_U_vld_out),
    .ack_out(res_V_data_6_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_6_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_7_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_7_V_TDATA_int),
    .vld_in(res_V_data_7_V_TVALID_int),
    .ack_in(res_V_data_7_V_TREADY_int),
    .data_out(res_V_data_7_V_TDATA),
    .vld_out(regslice_both_res_V_data_7_V_U_vld_out),
    .ack_out(res_V_data_7_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_7_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_8_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_8_V_TDATA_int),
    .vld_in(res_V_data_8_V_TVALID_int),
    .ack_in(res_V_data_8_V_TREADY_int),
    .data_out(res_V_data_8_V_TDATA),
    .vld_out(regslice_both_res_V_data_8_V_U_vld_out),
    .ack_out(res_V_data_8_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_8_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_9_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_9_V_TDATA_int),
    .vld_in(res_V_data_9_V_TVALID_int),
    .ack_in(res_V_data_9_V_TREADY_int),
    .data_out(res_V_data_9_V_TDATA),
    .vld_out(regslice_both_res_V_data_9_V_U_vld_out),
    .ack_out(res_V_data_9_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_9_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_10_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_10_V_TDATA_int),
    .vld_in(res_V_data_10_V_TVALID_int),
    .ack_in(res_V_data_10_V_TREADY_int),
    .data_out(res_V_data_10_V_TDATA),
    .vld_out(regslice_both_res_V_data_10_V_U_vld_out),
    .ack_out(res_V_data_10_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_10_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_11_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_11_V_TDATA_int),
    .vld_in(res_V_data_11_V_TVALID_int),
    .ack_in(res_V_data_11_V_TREADY_int),
    .data_out(res_V_data_11_V_TDATA),
    .vld_out(regslice_both_res_V_data_11_V_U_vld_out),
    .ack_out(res_V_data_11_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_11_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_12_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_12_V_TDATA_int),
    .vld_in(res_V_data_12_V_TVALID_int),
    .ack_in(res_V_data_12_V_TREADY_int),
    .data_out(res_V_data_12_V_TDATA),
    .vld_out(regslice_both_res_V_data_12_V_U_vld_out),
    .ack_out(res_V_data_12_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_12_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_13_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_13_V_TDATA_int),
    .vld_in(res_V_data_13_V_TVALID_int),
    .ack_in(res_V_data_13_V_TREADY_int),
    .data_out(res_V_data_13_V_TDATA),
    .vld_out(regslice_both_res_V_data_13_V_U_vld_out),
    .ack_out(res_V_data_13_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_13_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_14_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_14_V_TDATA_int),
    .vld_in(res_V_data_14_V_TVALID_int),
    .ack_in(res_V_data_14_V_TREADY_int),
    .data_out(res_V_data_14_V_TDATA),
    .vld_out(regslice_both_res_V_data_14_V_U_vld_out),
    .ack_out(res_V_data_14_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_14_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_data_15_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_data_15_V_TDATA_int),
    .vld_in(res_V_data_15_V_TVALID_int),
    .ack_in(res_V_data_15_V_TREADY_int),
    .data_out(res_V_data_15_V_TDATA),
    .vld_out(regslice_both_res_V_data_15_V_U_vld_out),
    .ack_out(res_V_data_15_V_TREADY),
    .apdone_blk(regslice_both_res_V_data_15_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY_int;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_0_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_10_V_TDATA_blk_n = res_V_data_10_V_TREADY_int;
    end else begin
        res_V_data_10_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_10_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_10_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_11_V_TDATA_blk_n = res_V_data_11_V_TREADY_int;
    end else begin
        res_V_data_11_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_11_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_11_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_12_V_TDATA_blk_n = res_V_data_12_V_TREADY_int;
    end else begin
        res_V_data_12_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_12_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_12_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_13_V_TDATA_blk_n = res_V_data_13_V_TREADY_int;
    end else begin
        res_V_data_13_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_13_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_13_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_14_V_TDATA_blk_n = res_V_data_14_V_TREADY_int;
    end else begin
        res_V_data_14_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_14_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_14_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_15_V_TDATA_blk_n = res_V_data_15_V_TREADY_int;
    end else begin
        res_V_data_15_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_15_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_15_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY_int;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_1_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY_int;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_2_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY_int;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_3_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY_int;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_4_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY_int;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_5_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY_int;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_6_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY_int;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_7_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY_int;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_8_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY_int;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_TVALID_int = 1'b1;
    end else begin
        res_V_data_9_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_10_fu_1172_p2 = (trunc_ln708_s_fu_1128_p4 + zext_ln415_10_fu_1168_p1);

assign add_ln415_11_fu_1238_p2 = (trunc_ln708_10_fu_1194_p4 + zext_ln415_11_fu_1234_p1);

assign add_ln415_12_fu_1304_p2 = (trunc_ln708_11_fu_1260_p4 + zext_ln415_12_fu_1300_p1);

assign add_ln415_13_fu_1387_p2 = (trunc_ln708_12_fu_1343_p4 + zext_ln415_13_fu_1383_p1);

assign add_ln415_14_fu_1470_p2 = (trunc_ln708_13_fu_1426_p4 + zext_ln415_14_fu_1466_p1);

assign add_ln415_15_fu_1553_p2 = (trunc_ln708_14_fu_1509_p4 + zext_ln415_15_fu_1549_p1);

assign add_ln415_1_fu_578_p2 = (trunc_ln708_1_fu_534_p4 + zext_ln415_1_fu_574_p1);

assign add_ln415_2_fu_644_p2 = (trunc_ln708_2_fu_600_p4 + zext_ln415_2_fu_640_p1);

assign add_ln415_3_fu_710_p2 = (trunc_ln708_3_fu_666_p4 + zext_ln415_3_fu_706_p1);

assign add_ln415_4_fu_776_p2 = (trunc_ln708_4_fu_732_p4 + zext_ln415_4_fu_772_p1);

assign add_ln415_5_fu_842_p2 = (trunc_ln708_5_fu_798_p4 + zext_ln415_5_fu_838_p1);

assign add_ln415_6_fu_908_p2 = (trunc_ln708_6_fu_864_p4 + zext_ln415_6_fu_904_p1);

assign add_ln415_7_fu_974_p2 = (trunc_ln708_7_fu_930_p4 + zext_ln415_7_fu_970_p1);

assign add_ln415_8_fu_1040_p2 = (trunc_ln708_8_fu_996_p4 + zext_ln415_8_fu_1036_p1);

assign add_ln415_9_fu_1106_p2 = (trunc_ln708_9_fu_1062_p4 + zext_ln415_9_fu_1102_p1);

assign add_ln415_fu_512_p2 = (trunc_ln_fu_468_p4 + zext_ln415_fu_508_p1);

assign and_ln415_10_fu_1162_p2 = (tmp_32_fu_1154_p3 & or_ln406_10_fu_1148_p2);

assign and_ln415_11_fu_1228_p2 = (tmp_35_fu_1220_p3 & or_ln406_11_fu_1214_p2);

assign and_ln415_12_fu_1294_p2 = (tmp_38_fu_1286_p3 & or_ln406_12_fu_1280_p2);

assign and_ln415_13_fu_1377_p2 = (tmp_41_fu_1369_p3 & or_ln406_13_fu_1363_p2);

assign and_ln415_14_fu_1460_p2 = (tmp_44_fu_1452_p3 & or_ln406_14_fu_1446_p2);

assign and_ln415_15_fu_1543_p2 = (tmp_47_fu_1535_p3 & or_ln406_15_fu_1529_p2);

assign and_ln415_1_fu_568_p2 = (tmp_5_fu_560_p3 & or_ln406_1_fu_554_p2);

assign and_ln415_2_fu_634_p2 = (tmp_8_fu_626_p3 & or_ln406_2_fu_620_p2);

assign and_ln415_3_fu_700_p2 = (tmp_11_fu_692_p3 & or_ln406_3_fu_686_p2);

assign and_ln415_4_fu_766_p2 = (tmp_14_fu_758_p3 & or_ln406_4_fu_752_p2);

assign and_ln415_5_fu_832_p2 = (tmp_17_fu_824_p3 & or_ln406_5_fu_818_p2);

assign and_ln415_6_fu_898_p2 = (tmp_20_fu_890_p3 & or_ln406_6_fu_884_p2);

assign and_ln415_7_fu_964_p2 = (tmp_23_fu_956_p3 & or_ln406_7_fu_950_p2);

assign and_ln415_8_fu_1030_p2 = (tmp_26_fu_1022_p3 & or_ln406_8_fu_1016_p2);

assign and_ln415_9_fu_1096_p2 = (tmp_29_fu_1088_p3 & or_ln406_9_fu_1082_p2);

assign and_ln415_fu_502_p2 = (tmp_2_fu_494_p3 & or_ln406_fu_488_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (res_V_data_0_V_TREADY_int == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (res_V_data_0_V_TREADY_int == 1'b0) | (ap_done_reg == 1'b1))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((res_V_data_0_V_TREADY_int == 1'b0) | (regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op3 == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_res_V_data_15_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_14_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_13_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_12_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_11_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_10_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_9_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_8_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_7_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_6_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_5_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_4_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_3_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_2_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_1_V_U_apdone_blk == 1'b1) | (regslice_both_res_V_data_0_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign empty_38_fu_1584_p3 = ((tmp_1_fu_460_p3[0:0] === 1'b1) ? add_ln415_fu_512_p2 : 16'd32767);

assign empty_39_fu_1601_p3 = ((tmp_4_fu_526_p3[0:0] === 1'b1) ? add_ln415_1_fu_578_p2 : 16'd32767);

assign empty_40_fu_1618_p3 = ((tmp_7_fu_592_p3[0:0] === 1'b1) ? add_ln415_2_fu_644_p2 : 16'd32767);

assign empty_41_fu_1635_p3 = ((tmp_10_fu_658_p3[0:0] === 1'b1) ? add_ln415_3_fu_710_p2 : 16'd32767);

assign empty_42_fu_1652_p3 = ((tmp_13_fu_724_p3[0:0] === 1'b1) ? add_ln415_4_fu_776_p2 : 16'd32767);

assign empty_43_fu_1669_p3 = ((tmp_16_fu_790_p3[0:0] === 1'b1) ? add_ln415_5_fu_842_p2 : 16'd32767);

assign empty_44_fu_1686_p3 = ((tmp_19_fu_856_p3[0:0] === 1'b1) ? add_ln415_6_fu_908_p2 : 16'd32767);

assign empty_45_fu_1703_p3 = ((tmp_22_fu_922_p3[0:0] === 1'b1) ? add_ln415_7_fu_974_p2 : 16'd32767);

assign empty_46_fu_1720_p3 = ((tmp_25_fu_988_p3[0:0] === 1'b1) ? add_ln415_8_fu_1040_p2 : 16'd32767);

assign empty_47_fu_1737_p3 = ((tmp_28_fu_1054_p3[0:0] === 1'b1) ? add_ln415_9_fu_1106_p2 : 16'd32767);

assign empty_48_fu_1754_p3 = ((tmp_31_fu_1120_p3[0:0] === 1'b1) ? add_ln415_10_fu_1172_p2 : 16'd32767);

assign empty_49_fu_1771_p3 = ((tmp_34_fu_1186_p3[0:0] === 1'b1) ? add_ln415_11_fu_1238_p2 : 16'd32767);

assign icmp_ln718_10_fu_1142_p2 = ((trunc_ln718_10_fu_1138_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_11_fu_1208_p2 = ((trunc_ln718_11_fu_1204_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_12_fu_1274_p2 = ((trunc_ln718_12_fu_1270_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_13_fu_1357_p2 = ((trunc_ln718_13_fu_1353_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_14_fu_1440_p2 = ((trunc_ln718_14_fu_1436_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_15_fu_1523_p2 = ((trunc_ln718_15_fu_1519_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_1_fu_548_p2 = ((trunc_ln718_1_fu_544_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_2_fu_614_p2 = ((trunc_ln718_2_fu_610_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_3_fu_680_p2 = ((trunc_ln718_3_fu_676_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_4_fu_746_p2 = ((trunc_ln718_4_fu_742_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_5_fu_812_p2 = ((trunc_ln718_5_fu_808_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_6_fu_878_p2 = ((trunc_ln718_6_fu_874_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_7_fu_944_p2 = ((trunc_ln718_7_fu_940_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_8_fu_1010_p2 = ((trunc_ln718_8_fu_1006_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_9_fu_1076_p2 = ((trunc_ln718_9_fu_1072_p1 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_fu_482_p2 = ((trunc_ln718_fu_478_p1 != 11'd0) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op3 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln406_10_fu_1148_p2 = (tmp_31_fu_1120_p3 | icmp_ln718_10_fu_1142_p2);

assign or_ln406_11_fu_1214_p2 = (tmp_34_fu_1186_p3 | icmp_ln718_11_fu_1208_p2);

assign or_ln406_12_fu_1280_p2 = (tmp_37_fu_1252_p3 | icmp_ln718_12_fu_1274_p2);

assign or_ln406_13_fu_1363_p2 = (tmp_40_fu_1335_p3 | icmp_ln718_13_fu_1357_p2);

assign or_ln406_14_fu_1446_p2 = (tmp_43_fu_1418_p3 | icmp_ln718_14_fu_1440_p2);

assign or_ln406_15_fu_1529_p2 = (tmp_46_fu_1501_p3 | icmp_ln718_15_fu_1523_p2);

assign or_ln406_1_fu_554_p2 = (tmp_4_fu_526_p3 | icmp_ln718_1_fu_548_p2);

assign or_ln406_2_fu_620_p2 = (tmp_7_fu_592_p3 | icmp_ln718_2_fu_614_p2);

assign or_ln406_3_fu_686_p2 = (tmp_10_fu_658_p3 | icmp_ln718_3_fu_680_p2);

assign or_ln406_4_fu_752_p2 = (tmp_13_fu_724_p3 | icmp_ln718_4_fu_746_p2);

assign or_ln406_5_fu_818_p2 = (tmp_16_fu_790_p3 | icmp_ln718_5_fu_812_p2);

assign or_ln406_6_fu_884_p2 = (tmp_19_fu_856_p3 | icmp_ln718_6_fu_878_p2);

assign or_ln406_7_fu_950_p2 = (tmp_22_fu_922_p3 | icmp_ln718_7_fu_944_p2);

assign or_ln406_8_fu_1016_p2 = (tmp_25_fu_988_p3 | icmp_ln718_8_fu_1010_p2);

assign or_ln406_9_fu_1082_p2 = (tmp_28_fu_1054_p3 | icmp_ln718_9_fu_1076_p2);

assign or_ln406_fu_488_p2 = (tmp_1_fu_460_p3 | icmp_ln718_fu_482_p2);

assign phitmp_12_fu_1318_p3 = ((tmp_37_fu_1252_p3[0:0] === 1'b1) ? add_ln415_12_fu_1304_p2 : 16'd32767);

assign phitmp_13_fu_1401_p3 = ((tmp_40_fu_1335_p3[0:0] === 1'b1) ? add_ln415_13_fu_1387_p2 : 16'd32767);

assign phitmp_14_fu_1484_p3 = ((tmp_43_fu_1418_p3[0:0] === 1'b1) ? add_ln415_14_fu_1470_p2 : 16'd32767);

assign phitmp_15_fu_1567_p3 = ((tmp_46_fu_1501_p3[0:0] === 1'b1) ? add_ln415_15_fu_1553_p2 : 16'd32767);

assign res_V_data_0_V_TDATA_int = ((tmp_3_fu_518_p3[0:0] === 1'b1) ? empty_38_fu_1584_p3 : add_ln415_fu_512_p2);

assign res_V_data_0_V_TVALID = regslice_both_res_V_data_0_V_U_vld_out;

assign res_V_data_10_V_TDATA_int = ((tmp_33_fu_1178_p3[0:0] === 1'b1) ? empty_48_fu_1754_p3 : add_ln415_10_fu_1172_p2);

assign res_V_data_10_V_TVALID = regslice_both_res_V_data_10_V_U_vld_out;

assign res_V_data_11_V_TDATA_int = ((tmp_36_fu_1244_p3[0:0] === 1'b1) ? empty_49_fu_1771_p3 : add_ln415_11_fu_1238_p2);

assign res_V_data_11_V_TVALID = regslice_both_res_V_data_11_V_U_vld_out;

assign res_V_data_12_V_TDATA_int = ((tmp_39_fu_1310_p3[0:0] === 1'b1) ? phitmp_12_fu_1318_p3 : add_ln415_12_fu_1304_p2);

assign res_V_data_12_V_TVALID = regslice_both_res_V_data_12_V_U_vld_out;

assign res_V_data_13_V_TDATA_int = ((tmp_42_fu_1393_p3[0:0] === 1'b1) ? phitmp_13_fu_1401_p3 : add_ln415_13_fu_1387_p2);

assign res_V_data_13_V_TVALID = regslice_both_res_V_data_13_V_U_vld_out;

assign res_V_data_14_V_TDATA_int = ((tmp_45_fu_1476_p3[0:0] === 1'b1) ? phitmp_14_fu_1484_p3 : add_ln415_14_fu_1470_p2);

assign res_V_data_14_V_TVALID = regslice_both_res_V_data_14_V_U_vld_out;

assign res_V_data_15_V_TDATA_int = ((tmp_48_fu_1559_p3[0:0] === 1'b1) ? phitmp_15_fu_1567_p3 : add_ln415_15_fu_1553_p2);

assign res_V_data_15_V_TVALID = regslice_both_res_V_data_15_V_U_vld_out;

assign res_V_data_1_V_TDATA_int = ((tmp_6_fu_584_p3[0:0] === 1'b1) ? empty_39_fu_1601_p3 : add_ln415_1_fu_578_p2);

assign res_V_data_1_V_TVALID = regslice_both_res_V_data_1_V_U_vld_out;

assign res_V_data_2_V_TDATA_int = ((tmp_9_fu_650_p3[0:0] === 1'b1) ? empty_40_fu_1618_p3 : add_ln415_2_fu_644_p2);

assign res_V_data_2_V_TVALID = regslice_both_res_V_data_2_V_U_vld_out;

assign res_V_data_3_V_TDATA_int = ((tmp_12_fu_716_p3[0:0] === 1'b1) ? empty_41_fu_1635_p3 : add_ln415_3_fu_710_p2);

assign res_V_data_3_V_TVALID = regslice_both_res_V_data_3_V_U_vld_out;

assign res_V_data_4_V_TDATA_int = ((tmp_15_fu_782_p3[0:0] === 1'b1) ? empty_42_fu_1652_p3 : add_ln415_4_fu_776_p2);

assign res_V_data_4_V_TVALID = regslice_both_res_V_data_4_V_U_vld_out;

assign res_V_data_5_V_TDATA_int = ((tmp_18_fu_848_p3[0:0] === 1'b1) ? empty_43_fu_1669_p3 : add_ln415_5_fu_842_p2);

assign res_V_data_5_V_TVALID = regslice_both_res_V_data_5_V_U_vld_out;

assign res_V_data_6_V_TDATA_int = ((tmp_21_fu_914_p3[0:0] === 1'b1) ? empty_44_fu_1686_p3 : add_ln415_6_fu_908_p2);

assign res_V_data_6_V_TVALID = regslice_both_res_V_data_6_V_U_vld_out;

assign res_V_data_7_V_TDATA_int = ((tmp_24_fu_980_p3[0:0] === 1'b1) ? empty_45_fu_1703_p3 : add_ln415_7_fu_974_p2);

assign res_V_data_7_V_TVALID = regslice_both_res_V_data_7_V_U_vld_out;

assign res_V_data_8_V_TDATA_int = ((tmp_27_fu_1046_p3[0:0] === 1'b1) ? empty_46_fu_1720_p3 : add_ln415_8_fu_1040_p2);

assign res_V_data_8_V_TVALID = regslice_both_res_V_data_8_V_U_vld_out;

assign res_V_data_9_V_TDATA_int = ((tmp_30_fu_1112_p3[0:0] === 1'b1) ? empty_47_fu_1737_p3 : add_ln415_9_fu_1106_p2);

assign res_V_data_9_V_TVALID = regslice_both_res_V_data_9_V_U_vld_out;

assign tmp_10_fu_658_p3 = data_V_data_3_V_dout[32'd27];

assign tmp_11_fu_692_p3 = data_V_data_3_V_dout[32'd11];

assign tmp_12_fu_716_p3 = add_ln415_3_fu_710_p2[32'd15];

assign tmp_13_fu_724_p3 = data_V_data_4_V_dout[32'd27];

assign tmp_14_fu_758_p3 = data_V_data_4_V_dout[32'd11];

assign tmp_15_fu_782_p3 = add_ln415_4_fu_776_p2[32'd15];

assign tmp_16_fu_790_p3 = data_V_data_5_V_dout[32'd27];

assign tmp_17_fu_824_p3 = data_V_data_5_V_dout[32'd11];

assign tmp_18_fu_848_p3 = add_ln415_5_fu_842_p2[32'd15];

assign tmp_19_fu_856_p3 = data_V_data_6_V_dout[32'd27];

assign tmp_1_fu_460_p3 = data_V_data_0_V_dout[32'd27];

assign tmp_20_fu_890_p3 = data_V_data_6_V_dout[32'd11];

assign tmp_21_fu_914_p3 = add_ln415_6_fu_908_p2[32'd15];

assign tmp_22_fu_922_p3 = data_V_data_7_V_dout[32'd27];

assign tmp_23_fu_956_p3 = data_V_data_7_V_dout[32'd11];

assign tmp_24_fu_980_p3 = add_ln415_7_fu_974_p2[32'd15];

assign tmp_25_fu_988_p3 = data_V_data_8_V_dout[32'd27];

assign tmp_26_fu_1022_p3 = data_V_data_8_V_dout[32'd11];

assign tmp_27_fu_1046_p3 = add_ln415_8_fu_1040_p2[32'd15];

assign tmp_28_fu_1054_p3 = data_V_data_9_V_dout[32'd27];

assign tmp_29_fu_1088_p3 = data_V_data_9_V_dout[32'd11];

assign tmp_2_fu_494_p3 = data_V_data_0_V_dout[32'd11];

assign tmp_30_fu_1112_p3 = add_ln415_9_fu_1106_p2[32'd15];

assign tmp_31_fu_1120_p3 = data_V_data_10_V_dout[32'd27];

assign tmp_32_fu_1154_p3 = data_V_data_10_V_dout[32'd11];

assign tmp_33_fu_1178_p3 = add_ln415_10_fu_1172_p2[32'd15];

assign tmp_34_fu_1186_p3 = data_V_data_11_V_dout[32'd27];

assign tmp_35_fu_1220_p3 = data_V_data_11_V_dout[32'd11];

assign tmp_36_fu_1244_p3 = add_ln415_11_fu_1238_p2[32'd15];

assign tmp_37_fu_1252_p3 = data_V_data_12_V_dout[32'd27];

assign tmp_38_fu_1286_p3 = data_V_data_12_V_dout[32'd11];

assign tmp_39_fu_1310_p3 = add_ln415_12_fu_1304_p2[32'd15];

assign tmp_3_fu_518_p3 = add_ln415_fu_512_p2[32'd15];

assign tmp_40_fu_1335_p3 = data_V_data_13_V_dout[32'd27];

assign tmp_41_fu_1369_p3 = data_V_data_13_V_dout[32'd11];

assign tmp_42_fu_1393_p3 = add_ln415_13_fu_1387_p2[32'd15];

assign tmp_43_fu_1418_p3 = data_V_data_14_V_dout[32'd27];

assign tmp_44_fu_1452_p3 = data_V_data_14_V_dout[32'd11];

assign tmp_45_fu_1476_p3 = add_ln415_14_fu_1470_p2[32'd15];

assign tmp_46_fu_1501_p3 = data_V_data_15_V_dout[32'd27];

assign tmp_47_fu_1535_p3 = data_V_data_15_V_dout[32'd11];

assign tmp_48_fu_1559_p3 = add_ln415_15_fu_1553_p2[32'd15];

assign tmp_4_fu_526_p3 = data_V_data_1_V_dout[32'd27];

assign tmp_5_fu_560_p3 = data_V_data_1_V_dout[32'd11];

assign tmp_6_fu_584_p3 = add_ln415_1_fu_578_p2[32'd15];

assign tmp_7_fu_592_p3 = data_V_data_2_V_dout[32'd27];

assign tmp_8_fu_626_p3 = data_V_data_2_V_dout[32'd11];

assign tmp_9_fu_650_p3 = add_ln415_2_fu_644_p2[32'd15];

assign trunc_ln708_10_fu_1194_p4 = {{data_V_data_11_V_dout[27:12]}};

assign trunc_ln708_11_fu_1260_p4 = {{data_V_data_12_V_dout[27:12]}};

assign trunc_ln708_12_fu_1343_p4 = {{data_V_data_13_V_dout[27:12]}};

assign trunc_ln708_13_fu_1426_p4 = {{data_V_data_14_V_dout[27:12]}};

assign trunc_ln708_14_fu_1509_p4 = {{data_V_data_15_V_dout[27:12]}};

assign trunc_ln708_1_fu_534_p4 = {{data_V_data_1_V_dout[27:12]}};

assign trunc_ln708_2_fu_600_p4 = {{data_V_data_2_V_dout[27:12]}};

assign trunc_ln708_3_fu_666_p4 = {{data_V_data_3_V_dout[27:12]}};

assign trunc_ln708_4_fu_732_p4 = {{data_V_data_4_V_dout[27:12]}};

assign trunc_ln708_5_fu_798_p4 = {{data_V_data_5_V_dout[27:12]}};

assign trunc_ln708_6_fu_864_p4 = {{data_V_data_6_V_dout[27:12]}};

assign trunc_ln708_7_fu_930_p4 = {{data_V_data_7_V_dout[27:12]}};

assign trunc_ln708_8_fu_996_p4 = {{data_V_data_8_V_dout[27:12]}};

assign trunc_ln708_9_fu_1062_p4 = {{data_V_data_9_V_dout[27:12]}};

assign trunc_ln708_s_fu_1128_p4 = {{data_V_data_10_V_dout[27:12]}};

assign trunc_ln718_10_fu_1138_p1 = data_V_data_10_V_dout[10:0];

assign trunc_ln718_11_fu_1204_p1 = data_V_data_11_V_dout[10:0];

assign trunc_ln718_12_fu_1270_p1 = data_V_data_12_V_dout[10:0];

assign trunc_ln718_13_fu_1353_p1 = data_V_data_13_V_dout[10:0];

assign trunc_ln718_14_fu_1436_p1 = data_V_data_14_V_dout[10:0];

assign trunc_ln718_15_fu_1519_p1 = data_V_data_15_V_dout[10:0];

assign trunc_ln718_1_fu_544_p1 = data_V_data_1_V_dout[10:0];

assign trunc_ln718_2_fu_610_p1 = data_V_data_2_V_dout[10:0];

assign trunc_ln718_3_fu_676_p1 = data_V_data_3_V_dout[10:0];

assign trunc_ln718_4_fu_742_p1 = data_V_data_4_V_dout[10:0];

assign trunc_ln718_5_fu_808_p1 = data_V_data_5_V_dout[10:0];

assign trunc_ln718_6_fu_874_p1 = data_V_data_6_V_dout[10:0];

assign trunc_ln718_7_fu_940_p1 = data_V_data_7_V_dout[10:0];

assign trunc_ln718_8_fu_1006_p1 = data_V_data_8_V_dout[10:0];

assign trunc_ln718_9_fu_1072_p1 = data_V_data_9_V_dout[10:0];

assign trunc_ln718_fu_478_p1 = data_V_data_0_V_dout[10:0];

assign trunc_ln_fu_468_p4 = {{data_V_data_0_V_dout[27:12]}};

assign zext_ln415_10_fu_1168_p1 = and_ln415_10_fu_1162_p2;

assign zext_ln415_11_fu_1234_p1 = and_ln415_11_fu_1228_p2;

assign zext_ln415_12_fu_1300_p1 = and_ln415_12_fu_1294_p2;

assign zext_ln415_13_fu_1383_p1 = and_ln415_13_fu_1377_p2;

assign zext_ln415_14_fu_1466_p1 = and_ln415_14_fu_1460_p2;

assign zext_ln415_15_fu_1549_p1 = and_ln415_15_fu_1543_p2;

assign zext_ln415_1_fu_574_p1 = and_ln415_1_fu_568_p2;

assign zext_ln415_2_fu_640_p1 = and_ln415_2_fu_634_p2;

assign zext_ln415_3_fu_706_p1 = and_ln415_3_fu_700_p2;

assign zext_ln415_4_fu_772_p1 = and_ln415_4_fu_766_p2;

assign zext_ln415_5_fu_838_p1 = and_ln415_5_fu_832_p2;

assign zext_ln415_6_fu_904_p1 = and_ln415_6_fu_898_p2;

assign zext_ln415_7_fu_970_p1 = and_ln415_7_fu_964_p2;

assign zext_ln415_8_fu_1036_p1 = and_ln415_8_fu_1030_p2;

assign zext_ln415_9_fu_1102_p1 = and_ln415_9_fu_1096_p2;

assign zext_ln415_fu_508_p1 = and_ln415_fu_502_p2;

endmodule //linear_array_array_ap_fixed_16_16_1_0_0_16u_linear_config17_s
